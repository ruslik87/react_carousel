{"version":3,"sources":["types/inputs.ts","features/imagesSlice.ts","features/formSlice.ts","app/store.ts","app/hooks.ts","components/Buttons/Buttons.tsx","api/data.ts","components/CarouselList/CarouselList.tsx","components/Carousel/Carousel.tsx","components/FormParams/FormParams.tsx","App.tsx","index.tsx"],"names":["InputName","imageSlice","createSlice","name","initialState","images","reducers","initImages","state","action","payload","actions","formSlice","step","frameSize","itemWidth","shift","animationDuration","infinite","setStep","setFrameSize","setItemWidth","setShift","setAnimationDuration","setInfinite","store","configureStore","reducer","imagesReducer","form","formReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","Buttons","dispatch","useState","isNext","setIsNext","isPrev","setIsPrev","prevShift","nextShift","useEffect","handleButtonClick","translate","maxShift","length","isFirstItem","isLastItem","className","type","disabled","onClick","imagesFromServer","CarouselList","positionStyle","useMemo","width","transform","transition","style","map","image","i","src","alt","Carousel","FormParams","handleChange","e","target","value","maxValue","inputValue","STEP","FRAME","ITEM","ANIMATION","htmlFor","id","onChange","min","INFINITE","checked","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31f4e6d0.chunk.js","sourcesContent":["export enum InputName {\n  STEP = 'step',\n  FRAME = 'frameSize',\n  ITEM = 'itemWidth',\n  ANIMATION = 'animationDuration',\n  INFINITE = 'infinite',\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ImagesState {\n  images: string[]\n}\n\nconst initialState: ImagesState = {\n  images: [],\n};\n\nconst imageSlice = createSlice({\n  name: 'images',\n  initialState,\n  reducers: {\n    initImages(state, action: PayloadAction<string[]>) {\n      state.images = action.payload;\n    },\n  },\n});\n\nexport const { initImages } = imageSlice.actions;\nexport default imageSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nconst initialState = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  shift: 0,\n  animationDuration: 1000,\n  infinite: false,\n};\n\nconst formSlice = createSlice({\n  name: 'form',\n  initialState,\n  reducers: {\n    setStep: (state, action: PayloadAction<number>) => {\n      state.step = action.payload;\n    },\n    setFrameSize: (state, action: PayloadAction<number>) => {\n      state.frameSize = action.payload;\n    },\n    setItemWidth: (state, action: PayloadAction<number>) => {\n      state.itemWidth = action.payload;\n    },\n    setShift: (state, action: PayloadAction<number>) => {\n      state.shift = action.payload;\n    },\n    setAnimationDuration: (state, action: PayloadAction<number>) => {\n      state.animationDuration = action.payload;\n    },\n    setInfinite: (state) => {\n      state.infinite = !state.infinite;\n    },\n  },\n});\n\nexport const {\n  setStep,\n  setItemWidth,\n  setFrameSize,\n  setShift,\n  setAnimationDuration,\n  setInfinite,\n} = formSlice.actions;\n\nexport default formSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport imagesReducer from '../features/imagesSlice';\nimport formReducer from '../features/formSlice';\n\nexport const store = configureStore({\n  reducer: {\n    images: imagesReducer,\n    form: formReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { setShift } from '../../features/formSlice';\n\nimport './Button.scss';\n\nexport const Buttons = () => {\n  const { images } = useAppSelector(state => state.images);\n  const {\n    step,\n    shift,\n    frameSize,\n    infinite,\n  } = useAppSelector(state => state.form);\n  const dispatch = useAppDispatch();\n  const [isNext, setIsNext] = useState(false);\n  const [isPrev, setIsPrev] = useState(false);\n\n  const prevShift = shift + step;\n  const nextShift = shift - step;\n\n  useEffect(() => {\n    setIsNext(false);\n    setIsPrev(false);\n  }, [step, frameSize, infinite]);\n\n  const handleButtonClick = (translate: number) => {\n    const maxShift = (images.length - frameSize) * -1;\n    const minShift = 0;\n    const isFirstItem = infinite && shift === minShift && translate > minShift;\n    const isLastItem = infinite && shift === maxShift && translate < maxShift;\n\n    if (translate < minShift || translate > maxShift) {\n      setIsNext(false);\n      setIsPrev(false);\n    }\n\n    if (isFirstItem) {\n      dispatch(setShift(maxShift));\n\n      return;\n    }\n\n    if (isLastItem) {\n      dispatch(setShift(minShift));\n\n      return;\n    }\n\n    if (translate >= minShift) {\n      dispatch(setShift(minShift));\n\n      if (!infinite) {\n        setIsPrev(true);\n      }\n\n      return;\n    }\n\n    if (translate <= maxShift) {\n      dispatch(setShift(maxShift));\n\n      if (!infinite) {\n        setIsNext(true);\n      }\n\n      return;\n    }\n\n    dispatch(setShift(translate));\n  };\n\n  return (\n    <div className=\"carousel__button\">\n      <button\n        type=\"button\"\n        disabled={isPrev}\n        onClick={() => handleButtonClick(prevShift)}\n      >\n        Prev\n      </button>\n      <button\n        data-cy=\"next\"\n        type=\"button\"\n        disabled={isNext}\n        onClick={() => handleButtonClick(nextShift)}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n","export const imagesFromServer = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n","import { useEffect, useMemo } from 'react';\nimport { imagesFromServer } from '../../api/data';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { initImages } from '../../features/imagesSlice';\n\nexport const CarouselList = () => {\n  const { images } = useAppSelector(store => store.images);\n  const {\n    itemWidth, frameSize, shift, animationDuration,\n  } = useAppSelector(state => state.form);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(initImages(imagesFromServer));\n  }, []);\n\n  const positionStyle = useMemo(() => ({\n    width: `${frameSize * itemWidth}px`,\n    transform: `translate(${shift * itemWidth}px)`,\n    transition: `all ${animationDuration}ms ease 0s`,\n  }), [frameSize, itemWidth, shift, animationDuration]);\n\n  return (\n    <ul\n      className=\"carousel__list\"\n      style={positionStyle}\n    >\n      {images.map((image, i: number) => (\n        <li key={image}>\n          <img\n            src={image}\n            alt={`${i + 1}`}\n            width={`${itemWidth}`}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { Buttons } from '../Buttons';\nimport { CarouselList } from '../CarouselList';\n\nimport './Carousel.scss';\n\nexport const Carousel: React.FC = () => (\n  <div className=\"carousel\">\n    <CarouselList />\n\n    <Buttons />\n  </div>\n);\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport {\n  setAnimationDuration,\n  setFrameSize,\n  setInfinite,\n  setItemWidth,\n  setStep,\n} from '../../features/formSlice';\n\nimport './FormParams.scss';\nimport { InputName } from '../../types/inputs';\n\nexport const FormParams = () => {\n  const { images } = useAppSelector(state => state.images);\n  const {\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = useAppSelector(state => state.form);\n  const dispatch = useAppDispatch();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = e.target;\n    const maxValue = images.length;\n    const inputValue = +value > maxValue ? maxValue : +value;\n\n    switch (name) {\n      case InputName.STEP: {\n        dispatch(setStep(inputValue));\n\n        return;\n      }\n\n      case InputName.FRAME: {\n        dispatch(setFrameSize(inputValue));\n\n        return;\n      }\n\n      case InputName.ITEM: {\n        dispatch(setItemWidth(+value));\n\n        return;\n      }\n\n      case InputName.ANIMATION: {\n        dispatch(setAnimationDuration(+value));\n\n        return;\n      }\n\n      default: {\n        dispatch(setInfinite());\n      }\n    }\n  };\n\n  return (\n    <form className=\"formParams\">\n      <fieldset className=\"formParams__field\">\n        <legend> Configuration </legend>\n        <label\n          className=\"formParams__item\"\n          htmlFor=\"stepId\"\n        >\n          Step:\n          <input\n            id=\"stepId\"\n            className=\"formParams__input\"\n            type=\"number\"\n            name={InputName.STEP}\n            value={step}\n            onChange={handleChange}\n          />\n        </label>\n        <label\n          className=\"formParams__item\"\n          htmlFor=\"frameId\"\n        >\n          Frame Size:\n          <input\n            id=\"frameId\"\n            className=\"formParams__input\"\n            type=\"number\"\n            name={InputName.FRAME}\n            value={frameSize}\n            onChange={handleChange}\n          />\n        </label>\n        <label\n          className=\"formParams__item\"\n          htmlFor=\"itemId\"\n        >\n          Item Size:\n          <input\n            id=\"itemId\"\n            className=\"formParams__input\"\n            type=\"number\"\n            step=\"10\"\n            min=\"10\"\n            name={InputName.ITEM}\n            value={itemWidth}\n            onChange={handleChange}\n          />\n        </label>\n        <label\n          className=\"formParams__item\"\n          htmlFor=\"animationId\"\n        >\n          Animation Duration:\n          <input\n            id=\"animationId\"\n            className=\"formParams__input\"\n            type=\"number\"\n            step=\"100\"\n            min=\"100\"\n            name={InputName.ANIMATION}\n            value={animationDuration}\n            onChange={handleChange}\n          />\n        </label>\n        <label\n          className=\"formParams__item\"\n          htmlFor=\"infiniteId\"\n        >\n          Infinite:\n          <input\n            id=\"infiniteId\"\n            className=\"formParams__input\"\n            type=\"checkbox\"\n            name={InputName.INFINITE}\n            checked={infinite}\n            onChange={handleChange}\n          />\n        </label>\n\n      </fieldset>\n    </form>\n  );\n};\n","/* eslint-disable react/jsx-one-expression-per-line */\nimport React from 'react';\nimport './App.scss';\nimport { useAppSelector } from './app/hooks';\nimport { Carousel } from './components/Carousel';\n\nimport { FormParams } from './components/FormParams';\n\nconst App: React.FC = () => {\n  const { images } = useAppSelector(state => state.images);\n\n  return (\n    <div className=\"app\">\n      <h1 data-cy=\"title\">\n        Carousel with {images.length} images\n      </h1>\n\n      <FormParams />\n\n      <Carousel />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}